#!/bin/zsh

basepath=/tmp/note-calc-times
mkdir -p $basepath

filespath="$basepath/files"
ls -1p $@ | grep -v / |& egrep -v '[^0-9]:' > $filespath

timeregexp='^[0-9/]{10} [0-9:]{8}$'
timespath="$basepath/times"
cat $filespath | xargs cat |& egrep -v '^cat:' | egrep $timeregexp | sort > $timespath

function line() { printf "%55s\n" | tr ' ' '-' }

size=$((`cat $timespath | wc -l`))
if [ $size -eq 0 ]; then
    echo 'formatted time not detected. abort.'
    rm -rf $basepath
    exit 1
fi

echo "detected time $size counts. listing..."; line
cat $filespath | xargs egrep -Hn $timeregexp; line
if [ $(($size % 2)) -eq 1 ]; then
    echo "detected time $size counts, not-even. abort."
    rm -rf $basepath
    return 1
fi
echo 'formatted time calculating...'; line

function to_unixtime() {
    if [ `uname` = 'Darwin' ]; then
        date -j -u -f '%Y/%m/%d %H:%M:%S' "$1" '+%s'
    elif which busybox >& /dev/null; then
        date -D '%Y/%m/%d %H:%M:%S' -d "$1" '+%s'
    else
        date -d "$1" '+%s' # Maybe GNU Linux
    fi
}

function print_time() {
    hour=$(($2 / 3600))
    minute=$((($2 % 3600) / 60))
    second=$(($2 % 60))
    printf "$1%02d:%02d:%02d\n" $hour $minute $second
}

function calc_time_diff() {
    before=`to_unixtime $1`
    after=`to_unixtime $2`
    diff=$(($after - $before))

    print_time "$1 -> $2 = " $diff
    total=$(($total + $diff))
}

declare -a lines; lines=( "${(@f)"$(<$timespath)"}" )
local total=0
local i=1
while true ; do
    local i1=$(($i+1))
    if [ $i1 -gt $size ]; then break; fi

    calc_time_diff ${lines[$i]} ${lines[$i1]}
    i=$(($i+2))
done
line; print_time 'Total time: ' $total
rm -rf $basepath

# vim: set filetype=zsh :
